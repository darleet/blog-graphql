// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package runtime

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/darleet/blog-graphql/internal/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputVoteArticle(ctx context.Context, obj interface{}) (model.VoteArticle, error) {
	var it model.VoteArticle
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"articleID", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "articleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("articleID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArticleID = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNVoteValue2githubᚗcomᚋdarleetᚋblogᚑgraphqlᚋinternalᚋmodelᚐVoteValue(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVoteComment(ctx context.Context, obj interface{}) (model.VoteComment, error) {
	var it model.VoteComment
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"commentID", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "commentID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commentID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommentID = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNVoteValue2githubᚗcomᚋdarleetᚋblogᚑgraphqlᚋinternalᚋmodelᚐVoteValue(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNVoteArticle2githubᚗcomᚋdarleetᚋblogᚑgraphqlᚋinternalᚋmodelᚐVoteArticle(ctx context.Context, v interface{}) (model.VoteArticle, error) {
	res, err := ec.unmarshalInputVoteArticle(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoteComment2githubᚗcomᚋdarleetᚋblogᚑgraphqlᚋinternalᚋmodelᚐVoteComment(ctx context.Context, v interface{}) (model.VoteComment, error) {
	res, err := ec.unmarshalInputVoteComment(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoteValue2githubᚗcomᚋdarleetᚋblogᚑgraphqlᚋinternalᚋmodelᚐVoteValue(ctx context.Context, v interface{}) (model.VoteValue, error) {
	var res model.VoteValue
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVoteValue2githubᚗcomᚋdarleetᚋblogᚑgraphqlᚋinternalᚋmodelᚐVoteValue(ctx context.Context, sel ast.SelectionSet, v model.VoteValue) graphql.Marshaler {
	return v
}

// endregion ***************************** type.gotpl *****************************
