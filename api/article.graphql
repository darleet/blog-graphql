type Article {
    id: ID!
    title: String!
    content: String!
    author: User!
    isClosed: Boolean!
    votes: Int!
    createdAt: Time!
    comments(after: String, sort: Sort = NEW_DESC): [Comment!]
}

input NewArticle {
    title: String!
    content: String!
    isClosed: Boolean!
}

input UpdateArticle {
    id: ID!
    title: String
    content: String
    isClosed: Boolean
}

extend type Query {
    # cursor-based pagination for articles
    articlesList(after: String, sort: Sort = NEW_DESC): [Article!]
    # cursor-based pagination for comments
    article(articleID: ID!): Article
}

extend type Mutation {
    createArticle(input: NewArticle!): Article! @isAuthenticated
    updateArticle(input: UpdateArticle!): Article! @isAuthenticated
    deleteArticle(id: ID!): Boolean! @isAuthenticated
}
